/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alice02/crd-controller-sample/pkg/apis/mysamplecontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SampleResourceLister helps list SampleResources.
type SampleResourceLister interface {
	// List lists all SampleResources in the indexer.
	List(selector labels.Selector) (ret []*v1.SampleResource, err error)
	// SampleResources returns an object that can list and get SampleResources.
	SampleResources(namespace string) SampleResourceNamespaceLister
	SampleResourceListerExpansion
}

// sampleResourceLister implements the SampleResourceLister interface.
type sampleResourceLister struct {
	indexer cache.Indexer
}

// NewSampleResourceLister returns a new SampleResourceLister.
func NewSampleResourceLister(indexer cache.Indexer) SampleResourceLister {
	return &sampleResourceLister{indexer: indexer}
}

// List lists all SampleResources in the indexer.
func (s *sampleResourceLister) List(selector labels.Selector) (ret []*v1.SampleResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SampleResource))
	})
	return ret, err
}

// SampleResources returns an object that can list and get SampleResources.
func (s *sampleResourceLister) SampleResources(namespace string) SampleResourceNamespaceLister {
	return sampleResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SampleResourceNamespaceLister helps list and get SampleResources.
type SampleResourceNamespaceLister interface {
	// List lists all SampleResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SampleResource, err error)
	// Get retrieves the SampleResource from the indexer for a given namespace and name.
	Get(name string) (*v1.SampleResource, error)
	SampleResourceNamespaceListerExpansion
}

// sampleResourceNamespaceLister implements the SampleResourceNamespaceLister
// interface.
type sampleResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SampleResources in the indexer for a given namespace.
func (s sampleResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.SampleResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SampleResource))
	})
	return ret, err
}

// Get retrieves the SampleResource from the indexer for a given namespace and name.
func (s sampleResourceNamespaceLister) Get(name string) (*v1.SampleResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sampleresource"), name)
	}
	return obj.(*v1.SampleResource), nil
}
